<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>每天进步一点点 on 每天进步一点点</title>
    <link>https://falconkaze.github.io/</link>
    <description>Recent content in 每天进步一点点 on 每天进步一点点</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Jun 2019 19:09:27 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Archlinux降级软件包</title>
      <link>https://falconkaze.github.io/posts/linux/archlinux%E9%99%8D%E7%BA%A7%E8%BD%AF%E4%BB%B6%E5%8C%85/</link>
      <pubDate>Tue, 04 Jun 2019 19:09:27 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/linux/archlinux%E9%99%8D%E7%BA%A7%E8%BD%AF%E4%BB%B6%E5%8C%85/</guid>
      <description>&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.cn/article-9730-1.html&#34;&gt;如何在Archlinux中降级软件包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;语法:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo downgrade [PACKAGE, ...] [-- [PACMAN OPTIONS]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假设要降级tmux，运行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo downgrade tmux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果(会列出本地缓存和远程镜像中所有可用的包)：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-  1)  tmux    2.8    1  x86_64  (remote)
-  2)  tmux    2.8    1  x86_64  (local)
-  3)  tmux    2.9    1  x86_64  (remote)
-  4)  tmux    2.9    1  x86_64  (local)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后输入需要的包号码，回车后就会开始安装&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>H2自定义sql函数</title>
      <link>https://falconkaze.github.io/posts/java/h2/h2%E8%87%AA%E5%AE%9A%E4%B9%89sql%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 03 Jun 2019 10:10:36 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/java/h2/h2%E8%87%AA%E5%AE%9A%E4%B9%89sql%E5%87%BD%E6%95%B0/</guid>
      <description>

&lt;p&gt;在为服务写测试用例的时候，为了不依赖外部数据库，通常会选用h2这个内存数据库。但是h2并不完全兼容mysql的语法，即使指定了&lt;code&gt;mode=MYSQL&lt;/code&gt;也如此。mysql中的一些函数也没有在h2中定义，这里介绍一下如何在h2中模拟mysql的函数。&lt;/p&gt;

&lt;h2 id=&#34;模拟函数&#34;&gt;模拟函数&lt;/h2&gt;

&lt;p&gt;h2支持一种语法&lt;code&gt;create alias&lt;/code&gt;，用来将java的static方法映射为sql别名(函数)。具体的实现流程如下，假设我们模拟&lt;code&gt;UNIX_TIMESTAMP&lt;/code&gt;这个函数。&lt;code&gt;UNIX_TIMESTAMP&lt;/code&gt;有无参和有参几种形式，经测试，可以通过java方法重载来模拟，下面只介绍参数为&lt;code&gt;Timestamp&lt;/code&gt;的情况。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先创建一个方法来模拟&lt;code&gt;UNIX_TIMESTAMP&lt;/code&gt;的逻辑。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  package com.falconkaze.example.h2;
  import java.sql.Timestamp;
  public class FunctionUtil{
    public static long unixTimestamp(Timestamp timestamp){
      return timestamp.getTime() / 1000;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;定义别名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通过flyway或者schema等手段在服务初始化的时候执行下面sql。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;  CREATE ALIAS UNIX_TIMESTAMP FOR &amp;quot;com.falconkaze.example.h2.FunctionUtil.unixTimestamp&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;替换h2中已有的函数&#34;&gt;替换h2中已有的函数&lt;/h2&gt;

&lt;p&gt;h2中有些函数与mysql中函数名相同，但是具体传参或作用不同，这时候我们可以将h2中的函数删除，然后用上面的方法自定义函数。具体过程如下，假设要删除的方法为&lt;code&gt;DATE_DIFF&lt;/code&gt;。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建一个删除函数的方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  package com.falconkaze.example.h2;
  import java.lang.reflect.Field;
  import java.util.Map;
  import org.h2.expression.Function;
  public class FunctionUtil{
    public static int removeFunction(String name){
      try {
        Field field = Function.class.getDeclareField(&amp;quot;FUNCTIONS&amp;quot;);
        field.setAccessible(true);
        ((Map)field.get(null).remove(name.toUpperCase()));
      }catch(Exception e){
        // do something.
      }
      return 0;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;移除函数&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;  CREATE ALIAS IF NOT EXISTS REMOVE_FUNCTION FOR &amp;quot;com.falconkaze.example.h2.FunctionUtil&amp;quot;;
  CALL REMOVE_FUNCTION(&amp;quot;DIFFDATE&amp;quot;);
  DROP ALIS IF EXISTS DATEDIFF;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://falconkaze.github.io/posts/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 02 Jun 2019 15:06:29 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/design-pattern/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/Dongguabai/article/details/82828125&#34;&gt;双重检查锁问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/jason0539/article/details/23297037&#34;&gt;JAVA设计模式之单例模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于一些类来说，只有一个实例是非常重要的。比如计算机系统可以安装多个窗口管理器，但是同一时间只能使用一个；火车售票处可以有多个窗口同时出售车票，但是票源都是来自同一个地方。&lt;/p&gt;

&lt;p&gt;单例模式的作用就是保证一个类只有一个实例，并提供一个访问它的全局访问点。选择单例模式通常是为了避免不一致状态。除了避免不一致之外，还有一种情况可以使用单例模式：当类的对象是无状态的，或者它的状态事实不可变时，这时候创建多个对象的作用与一个对象没有什么区别，可以用单例模式避免对象的重复创建。比如在Spring mvc程序中，Controller，Service，Dao通常都是单例。&lt;/p&gt;

&lt;p&gt;单例模式有以下特点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单例类只能有一个实例。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;单例类必须有一个接口来给其他外部提供这一实例。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通常单例类来创建自己的唯一实例。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;单例模式的实现方法有好几种：懒汉式单例、饿汉式单例、登记式单例。&lt;/p&gt;

&lt;h2 id=&#34;懒汉式单例&#34;&gt;懒汉式单例&lt;/h2&gt;

&lt;p&gt;懒汉式单例的特点是在需要时才创建实例，可以避免或延迟对象创建的开销和内存的消耗。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;线程不安全的实现&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class Singleton{
    private Singleton{}
    private static Singleton single = null;
    public static Singleton getInstance(){
      if (single == null){
        single = new Singleton();
      }
      return single;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里将构造方法设为private，将对象的创建权独占在本类中（实际上，通过java反射机制可以实例化构造方法为private的类的），从而保证单例的实现。因为上面例子中存在先检查后执行的逻辑，并且没有进行同步，所以在多线程中可能会有问题。下面介绍几种多线程下的懒汉单例实现。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在getInstance方法上加同步锁&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public static synchronized Singleton getInstance(){
    if (single == null){
      single = new Singleton();
    }
    return single;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个方法可以保证线程安全，但是单例模式只需要在对象创建的时候进行同步，对象创建后就没必要进行同步了，所以这种方法不必要的性能损耗。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;双重检查锁定（DCL）&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class Singleton {
    private static volitile Singleton singleton;
    public static Singleton getInstance(){
      if(singleton == null){
        synchronized(Singleton.class){
          if(singleton == null){
            singleton = new Singleton();
          }
        }
      }
      return singleton;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里要注意一点，类成员变量singleton必须指定volitile。这是因为上面的代码保证了原子性，但是没有保证singleton的可见性。对象的创建包含三个步骤：&lt;/p&gt;

&lt;p&gt;a. 分配内存&lt;/p&gt;

&lt;p&gt;b. 初始化对象&lt;/p&gt;

&lt;p&gt;c. 内存赋值给引用&lt;/p&gt;

&lt;p&gt;由于指令重排序的存在，b和c的顺序可能对调。在这种情况下，当一个线程执行完c步骤（singleton就不为null了），如果另一个线程执行到第一个if处，就会认为对象创建成功，从而返回一个未构造完成的对象。而volitile可以避免指令重排序，就避免了这种异常情况。&lt;/p&gt;

&lt;p&gt;DCL模式出现是因为无竞争同步的执行速度很慢，JVM启动时很慢，这种现象已经不存在了。另外这种方式灵活性较差，如果一个对象在构造结束后还需要set一些值或者做一些额外的操作才算对象创建结束，由于DCL根据对象是否为null来判断对象是否创建结束，就会产生一定的问题。这种方式并不是很推荐使用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;静态内部类&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class Singleton {
    private Singleton{}
    private static class LazyHolder {
      private static final Singleton INSTANCE = new Singleton();
    }
    public static final Singleton getInstance(){
      return LazyHolder.INSTANCE;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方式利用JVM的类加载过程是线程安全的来保证单例对象创建过程的线程安全。&lt;/p&gt;

&lt;h2 id=&#34;饿汉式单例&#34;&gt;饿汉式单例&lt;/h2&gt;

&lt;p&gt;饿汉式单例在类加载的时候就进行了类的创建，利用了类加载过程的线程安全性。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;第一种方式&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class Singleton{
    private Singleton{}
    private static final Singleton singleton = new Singleton();
    public static Singleton getInstance(){
      return singleton;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果类的创建过程比较复杂，可以利用静态代码块来创建。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;利用枚举实现单例&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public enum Singleton {
    INSTANCE;
  }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://falconkaze.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 01 Jun 2019 21:30:50 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/design-pattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>

&lt;h2 id=&#34;设计模式分类&#34;&gt;设计模式分类&lt;/h2&gt;

&lt;p&gt;设计模式分为三大类：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。&lt;/li&gt;
&lt;li&gt;结构型模式，共七种：适配器模式、装饰者模式、代理模式、外观模式、桥接模式、组合模式、享元模式。&lt;/li&gt;
&lt;li&gt;行为型模式，共11种：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Spring获取bean的几种方法</title>
      <link>https://falconkaze.github.io/posts/java/spring/spring%E8%8E%B7%E5%8F%96bean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 09 May 2019 19:35:21 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/java/spring/spring%E8%8E%B7%E5%8F%96bean%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ktanx.com/blog/p/326&#34;&gt;spring获取bean的几种方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Static变量注入bean</title>
      <link>https://falconkaze.github.io/posts/java/spring/static%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5bean/</link>
      <pubDate>Thu, 09 May 2019 17:57:22 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/java/spring/static%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5bean/</guid>
      <description>&lt;p&gt;在springframework中，不能将bean注入到static域中。比如下面的代码，虽然启动不会抛异常，但是使用时会抛&lt;code&gt;NullPointerException&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  @Autowired
  private static DemoBean demoBean;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之所以这样，是因为static变量属于类的特性，在类加载的时候就要进行赋值，但是类的加载是JVM做的，Spring无法在类加载的时候将bean注入进去。所以spring是基于对象层面的依赖注入。&lt;/p&gt;

&lt;p&gt;但是实际工作中有时候确实需要将bean赋值给static变量，这时候就需要进行特殊处理。有下面几种方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将类注册为Bean，通过成员方法注入&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class Test{

    private static DemoBean demoBean;

    @Autowired
    public void setDemoBean(DemoBean demoBean){
      Test.demoBean = demoBean;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;将类注册为Bean，通过@PostConstruct在Bean初始化时注册。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  public class Test{

    private static DemoBean demoBean;

    @Autowired
    private DemoBean tmpDemoBean;

    @PostContrust
    public void init(){
      Test.demoBean = tmpDemoBean;
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;自己获取Bean，然后将赋值给static变量。参考&lt;a href=&#34;../spring获取bean的几种方法&#34;&gt;spring获取bean的几种方法&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本文介绍了几种将Bean注入给static变量的方法，但是如果没有特殊的需求，要尽量避免将Bean注入给static变量，这与spring的初衷冲突。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Archlinux选择镜像源</title>
      <link>https://falconkaze.github.io/posts/linux/archlinux%E9%80%89%E6%8B%A9%E9%95%9C%E5%83%8F%E6%BA%90/</link>
      <pubDate>Tue, 30 Apr 2019 16:45:05 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/linux/archlinux%E9%80%89%E6%8B%A9%E9%95%9C%E5%83%8F%E6%BA%90/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Mirrors_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F&#34;&gt;arch-wiki Mirrors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/Reflector&#34;&gt;arch-wiki reflector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;手动生成镜像源&#34;&gt;手动生成镜像源&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 选择中国的https协议的完全同步的镜像源，按下载速度排序后覆盖到mirrorlist.
/usr/bin/reflector --country China -p http  --latest 20 -p https --sort rate &amp;gt;&amp;gt; /etc/pacman.d/mirrorlist
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;定时同步镜像源&#34;&gt;定时同步镜像源&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/etc/cron.weekly/mirrorlist
--------------------------------
#! /bin/bash

/usr/bin/reflector --country China -p http  --latest 20 -p https --sort rate &amp;gt;&amp;gt; /etc/pacman.d/mirrorlist
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>创建命令别名——Alias</title>
      <link>https://falconkaze.github.io/posts/linux/alias/</link>
      <pubDate>Tue, 23 Apr 2019 11:20:07 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/linux/alias/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/wklken/article/details/7707357&#34;&gt;一些alias配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.51cto.com/538358/1838044&#34;&gt;shell中使用alias&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;alias 是shell的内置命令，可以为命令设置一个别名，可以简化命令输入，提高效率。&lt;/p&gt;

&lt;h2 id=&#34;命令使用&#34;&gt;命令使用&lt;/h2&gt;

&lt;p&gt;别名的第一个字符可以是除元字符外的任何可打印字符，其余字符必须与对于有效文件名的要求相同。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;创建别名&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  # 删除文件前提示
  alias rm=&amp;quot;/usr/bin/rm -i&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;查看所有别名&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  alias
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有时候我们需要使用原来的命令，而不是别名代指的命令。这时候可以在命令前加上反斜杠。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias cat=echo
cat test.txt
\cat test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;alias别名只在当前shell中有效，不能被继承，不能被export。&lt;/p&gt;

&lt;h2 id=&#34;常用别名&#34;&gt;常用别名&lt;/h2&gt;

&lt;h4 id=&#34;指定命令默认选项&#34;&gt;指定命令默认选项&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias ping=&amp;quot;ping -c 3&amp;quot;

alias l=&#39;ls -CF --color=auto&#39;
alias ls=&#39;ls --color=auto&#39;
alias ll=&#39;ls -AlF --color=auto&#39;
alias la=&#39;ls -A --color=auto&#39;
alias dir=&#39;dir --color=auto&#39;
alias vdir=&#39;vdir --color=auto&#39;

alias grep=&#39;grep --color=auto&#39;
alias fgrep=&#39;fgrep --color=auto&#39;
alias egrep=&#39;egrep --color=auto&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;组合命令&#34;&gt;组合命令&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 查看ip地址
alias mip=&#39;ifconfig enp1s0 | grep &amp;quot;inet &amp;quot; | awk &#39;\&#39;&#39;{print $2 }&#39;\&#39;&#39;&#39;
# 输出当前毫秒级时间戳
alias timestamp=&#39;nanotime=`date +%s%N`;echo ${nanotime:0:13}&#39;
# 将秒级时间戳转为指定格式时间
alias time2date=&#39;fun() { date -d @${1} &amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;;};fun&#39;

alias db=mysql -uroot -proot_pass
alias dbcli=mycli -uroot -proot_pass

alias reload=&#39;source ~/.bashrc&#39;
alias bashrc=&#39;vim ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc&#39;
alias bashpr=&#39;vim ~/.bash_profile &amp;amp;&amp;amp; source ~/.bash_profile&#39;
alias bashal=&#39;vim ~/.bash_aliases &amp;amp;&amp;amp; source ~/.bash_aliases&#39;


alias wgetall=&#39;wget -c -r -k -np -L&#39;
alias psgrep=&#39;ps -ef | grep&#39;
alias netgrep=&#39;netstat -npl| grep&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;shell中使用alias&#34;&gt;shell中使用alias&lt;/h2&gt;

&lt;p&gt;shell有交互式和非交互式两种工作模式，使用终端执行命令就是交互式，shell脚本用的是非交互式。&lt;/p&gt;

&lt;p&gt;在交互式模式下，alias功能是默认打开的。而非交互模式下默认是关闭的，这个时候可以定义alias，但是shell不会将alias别名映射为对应的命令。&lt;/p&gt;

&lt;p&gt;如果需要在shell脚本中使用alias别名，可以使用shopt命令。shopt是shell的内置命令，可以控制shell功能选项的开启和关闭，从而控制shell的行为。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;shopt -s opt_name                 # Enable (set) opt_name.
shopt -u opt_name                 # Disable (unset) opt_name.
shopt opt_name                    # Show current status of opt_name.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;alias扩展功能对应的&lt;code&gt;opt_name&lt;/code&gt;是&lt;code&gt;expand_aliases&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;另外，shell脚本在执行的时候不会读取&lt;code&gt;.bashrc&lt;/code&gt;文件，如果需要读取这个文件的话。可以在shell脚本第一行的解释器上加上参数:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash --login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--login&lt;/code&gt;是的执行脚本的子shell成为一个login shell，它会读取系统和用户的profile及rc文件。如果不加这个参数的话，也可以在shell中手动&lt;code&gt;source ~/.bashrc&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Openconnect使用</title>
      <link>https://falconkaze.github.io/posts/linux/openconnect%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 08 Apr 2019 20:20:48 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/linux/openconnect%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/index.php/OpenConnect&#34;&gt;archlinux wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.archlinux.org/task/61738&#34;&gt;archlinux bug&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Unit Dbus Org.freedesktop.resolve1.service not found</title>
      <link>https://falconkaze.github.io/posts/linux/unit-dbus-org.freedesktop.resolve1.service-not-found/</link>
      <pubDate>Mon, 08 Apr 2019 20:16:46 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/linux/unit-dbus-org.freedesktop.resolve1.service-not-found/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.archlinux.org/task/61738&#34;&gt;Archlinux bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解决方案:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl enable systemd-resolved.service
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>TypeHandler自定义类型转换</title>
      <link>https://falconkaze.github.io/posts/java/mybatis/typehandler%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 27 Mar 2019 20:17:45 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/java/mybatis/typehandler%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/yulinfeng/p/5991170.html&#34;&gt;mybatis之TypeHandler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://note4code.com/2018/03/25/%E6%B3%9B%E5%9E%8B-typehandler/&#34;&gt;泛型TypeHandler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在应用开发中，经常遇到数据表数据和我们需要的数据不对应的情况(类型or值)，有时候是因为数据库字段的限制，比如数据库不支持List，有时候是因为存储方面的考虑，比如“男”“女”经常保存为0和1。按照通常的做法，需要在插入和读取的时候手动进行转换。而mybatis为我们提供了一种通用的接口，只要自己实现相应的转换逻辑，然后指定对应的java类型和数据库字段类型就可以了。另外mybatis已经提供了几种默认TypeHandler，涵盖了常见的转换操作。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Launchd使用</title>
      <link>https://falconkaze.github.io/posts/mac/launchd%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 21 Mar 2019 21:13:40 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/mac/launchd%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xiaocai.name/2017/07/07/Mac%E4%B8%8B%E7%9A%84launchctl%E4%BD%BF%E7%94%A8/&#34;&gt;mac下使用launchctl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;launchd是mac上自带的一个执行任务的服务&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>001 二维数组中的查找</title>
      <link>https://falconkaze.github.io/article/algorithm/nowcoder/%E5%89%91%E6%8C%87offer/001-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Wed, 13 Mar 2019 22:25:18 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/article/algorithm/nowcoder/%E5%89%91%E6%8C%87offer/001-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;直接遍历所有元素，存在相等返回true，不然返回false。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;运行时间159ms, 占用内存176316k&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean Find(int target, int [][] array) {
  for(int[] array1 : array){
    for(int value :array1){
      if (value == target){
        return true;
      }
    }
  }
  return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;因为数组每一行都是递增的，可以使用二分查找。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;时间 173ms, 占用内存17428k&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public boolean Find(int target, int [][] array) {
  for(int[] array1: array){
    if (array1.length == 0 || array1[0] &amp;gt; target || array1[array1.length - 1] &amp;lt; target){
      continue;
    }
    if(array1[0] == target || array1[array1.length - 1] == target){
      return true;
    }
    int minIndex = 0;
    int maxIndex = array1.length - 1;
    int middleIndex;
    int middleValue;
    do {
      middleIndex = (minIndex + maxIndex) / 2;
      middleValue = array1[middleIndex];
      if(middleValue == target){
        return true;
      }else if(middleValue &amp;gt; target){
        maxIndex = middleIndex;
      }else {
        minIndex = middleIndex;
      }
    // 如果是 minIndex &amp;lt; maxIndex 的话, 会导致死循环.
    }while(minIndex &amp;lt; maxIndex - 1);
  }
  return false;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Java8 Stream常用操作</title>
      <link>https://falconkaze.github.io/posts/java/stream/java8-%E6%B5%81%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 06 Mar 2019 18:31:24 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/java/stream/java8-%E6%B5%81%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>

&lt;p&gt;所有的流操作都有一种共同的结构，具有一个流来源，0或多个中间操作，一个终止操作。&lt;/p&gt;

&lt;h2 id=&#34;创建流&#34;&gt;创建流&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;myCollection.stream()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Stream.of(T&amp;hellip;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Stream.of(T)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Stream.empty()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Stream.iterate(T, UnaryOperator&lt;T&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Stream.generate(Supplier&lt;T&gt;)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IntStream.range(lower,upper)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;myBufferedReader.lines()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;myBitSet.Stream()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;myString.chars()&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;中间操作&#34;&gt;中间操作&lt;/h2&gt;

&lt;p&gt;中间操作负责处理流中的每个元素。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Stream&amp;lt;R&amp;gt; flatMap(Function&amp;lt;T, Stream&amp;lt;R&amp;gt;)&lt;/code&gt;将源流中的每个元素转为新的流，然后将这些流中的元素合并为一个新的流。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  List&amp;lt;String&amp;gt; array1 = Arrays.asList(&amp;quot;test-101&amp;quot;,&amp;quot;test-102&amp;quot;);
  List&amp;lt;String&amp;gt; array2 = Arrays.asList(&amp;quot;test-201&amp;quot;,&amp;quot;test-202&amp;quot;);
  List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; lists = Arrays.asList(array1, array2);
  List&amp;lt;String&amp;gt; test = lists.stream()
      .flatMap(Collection::stream)
      .collect(Collectors.toList());
  System.out.println(test);
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Stream&amp;lt;T&amp;gt; filter&amp;lt;Predicate&amp;lt;? super T&amp;gt;)&lt;/code&gt; 过滤出符合匹配条件的元素&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  List&amp;lt;String&amp;gt; strings = Arrays.asList(null, &amp;quot;test-001&amp;quot;, &amp;quot;test-002&amp;quot;);
  System.out.println(strings);
  strings = strings.stream()
      .filter(Objects::nonNull)
      .collect(Collectors.toList());
  System.out.println(strings);```java
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;结束操作&#34;&gt;结束操作&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;collect&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;R, A&amp;gt; collect(Collector&amp;lt;? super T, A, R&amp;gt;)&lt;/code&gt; 将stream聚合为一个集合（list，set，map）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  TestModel testModel1 = new TestModel(&amp;quot;name-001&amp;quot;, &amp;quot;value-001&amp;quot;);
  TestModel testModel2 = new TestModel(&amp;quot;name-002&amp;quot;, &amp;quot;value-002&amp;quot;);
  // TestModel testModel3 = new TestModel(&amp;quot;name-002&amp;quot;, &amp;quot;value-002&amp;quot;);
  TestModel testModel3 = new TestModel(&amp;quot;name-003&amp;quot;, &amp;quot;value-003&amp;quot;);
  List&amp;lt;TestModel&amp;gt; list = Arrays.asList(testModel1, testModel2, testModel3);

  # key不可以重复，否则会抛异常 java.lang.IllegalStateException: Duplicate key
  Map&amp;lt;String,String&amp;gt; nameValueMap = list.stream().collect(Collectors.toMap(TestModel::getName, TestModel::getValue));
  System.out.println(nameValueMap);

  Map&amp;lt;String,List&amp;lt;TestModel&amp;gt;&amp;gt; nameListMap = list.stream().collect(Collectors.groupingBy(TestModel::getName));
  System.out.println(nameListMap);

  Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt; nameValueListMap = list.stream()
      .collect(Collectors.groupingBy(TestModel::getName,Collectors.mapping(TestModel::getName, Collectors.toList())));
  System.out.println(nameValueListMap);
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;findAny&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;findFirst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Java对象关系判断</title>
      <link>https://falconkaze.github.io/posts/java/java%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E5%88%A4%E6%96%AD/</link>
      <pubDate>Tue, 05 Mar 2019 10:01:05 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/java/java%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E5%88%A4%E6%96%AD/</guid>
      <description>

&lt;h2 id=&#34;判断对象是不是类的实例&#34;&gt;判断对象是不是类的实例&lt;/h2&gt;

&lt;p&gt;使用instanceof。一个类的对象也是它超类或超接口的实例，通常在类型强转前需要instanceof判断，避免抛出异常。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  Object value = new Integer;
  if(value instanceof CharSequence){
    System.out.println(&amp;quot;value is not a instance of CharSequence&amp;quot;);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;判断class对象对应的类之间的关系&#34;&gt;判断Class对象对应的类之间的关系&lt;/h2&gt;

&lt;p&gt;使用&lt;code&gt;class1.isAssignableFrom(class2)&lt;/code&gt;，判断class1表示类或接口是否和class2表示的相同或者是其超类或者超接口，返回true、false。基本类型没有超类或超接口，也就是说当class2为基本类型的class对象时，只有class1为也为class2时，才返回true。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  System.out.println(&amp;quot;&amp;quot; + int.class.isAssignableFrom(int.class));
  System.out.println(&amp;quot;&amp;quot; + Object.class.isAssignableFrom(int.class));
  System.out.println(&amp;quot;&amp;quot; + Object.class.isAssignableFrom(String.class));
  System.out.println(&amp;quot;&amp;quot; + Object.class.isAssignableFrom(char.class));
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>