<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>h2 on 每天进步一点点</title>
    <link>https://falconkaze.github.io/tags/h2/</link>
    <description>Recent content in h2 on 每天进步一点点</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jun 2019 10:10:36 +0800</lastBuildDate>
    
	<atom:link href="https://falconkaze.github.io/tags/h2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>H2自定义sql函数</title>
      <link>https://falconkaze.github.io/posts/java/h2/h2%E8%87%AA%E5%AE%9A%E4%B9%89sql%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 03 Jun 2019 10:10:36 +0800</pubDate>
      
      <guid>https://falconkaze.github.io/posts/java/h2/h2%E8%87%AA%E5%AE%9A%E4%B9%89sql%E5%87%BD%E6%95%B0/</guid>
      <description>在为服务写测试用例的时候，为了不依赖外部数据库，通常会选用h2这个内存数据库。但是h2并不完全兼容mysql的语法，即使指定了mode=MYSQL也如此。mysql中的一些函数也没有在h2中定义，这里介绍一下如何在h2中模拟mysql的函数。
模拟函数 h2支持一种语法create alias，用来将java的static方法映射为sql别名(函数)。具体的实现流程如下，假设我们模拟UNIX_TIMESTAMP这个函数。UNIX_TIMESTAMP有无参和有参几种形式，经测试，可以通过java方法重载来模拟，下面只介绍参数为Timestamp的情况。
 首先创建一个方法来模拟UNIX_TIMESTAMP的逻辑。  package com.falconkaze.example.h2; import java.sql.Timestamp; public class FunctionUtil{ public static long unixTimestamp(Timestamp timestamp){ return timestamp.getTime() / 1000; } }   定义别名  通过flyway或者schema等手段在服务初始化的时候执行下面sql。
CREATE ALIAS UNIX_TIMESTAMP FOR &amp;quot;com.falconkaze.example.h2.FunctionUtil.unixTimestamp&amp;quot;;  替换h2中已有的函数 h2中有些函数与mysql中函数名相同，但是具体传参或作用不同，这时候我们可以将h2中的函数删除，然后用上面的方法自定义函数。具体过程如下，假设要删除的方法为DATE_DIFF。
 创建一个删除函数的方法。  package com.falconkaze.example.h2; import java.lang.reflect.Field; import java.util.Map; import org.h2.expression.Function; public class FunctionUtil{ public static int removeFunction(String name){ try { Field field = Function.class.getDeclareField(&amp;quot;FUNCTIONS&amp;quot;); field.setAccessible(true); ((Map)field.get(null).remove(name.toUpperCase())); }catch(Exception e){ // do something.</description>
    </item>
    
  </channel>
</rss>